"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[62884],{27144:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>r,metadata:()=>p,toc:()=>d});var n=t(74848),o=t(28453),i=t(52358);const l='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">internal </span><span class="token keyword">var </span><a href="field-cache-">fieldCache</a><span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-mutable-map/index.html">MutableMap</a><span class="token operator">&lt;</span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-any/index.html">Any</a><span class="token operator">?</span><span class="token operator">&gt;</span></div><p class="paragraph">Cached fetched values for fields Key is the path to the resultKey If entry is not found, it has not been fetched yet</p></div></div>\n',r={},s="fieldCache",p={id:"api/graphglue-core/io.github.graphglue.model/-node/field-cache-",title:"fieldCache",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.model/-node/field-cache-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.model/-node",slug:"/api/graphglue-core/io.github.graphglue.model/-node/field-cache-",permalink:"/api/graphglue-core/io.github.graphglue.model/-node/field-cache-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"equals",permalink:"/api/graphglue-core/io.github.graphglue.model/-node/equals-"},next:{title:"getFromGraphQL",permalink:"/api/graphglue-core/io.github.graphglue.model/-node/get-from-graph-q-l-"}},c={},d=[];function h(e){const a={h1:"h1",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"fieldcache",children:"fieldCache"}),"\n",(0,n.jsx)(i.A,{dokkaHTML:l})]})}function g(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);