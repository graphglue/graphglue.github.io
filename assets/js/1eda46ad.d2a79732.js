"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[77957],{32202:(a,e,s)=>{s.r(e),s.d(e,{assets:()=>g,contentTitle:()=>r,default:()=>c,frontMatter:()=>p,metadata:()=>o,toc:()=>d});var n=s(74848),i=s(28453),t=s(52358);const l='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue/main"><div class="symbol monospace"><span class="token keyword">open </span><span class="token keyword">override </span><span class="token keyword">fun </span><a href="is-valid-additional-type-"><span class="token function">isValidAdditionalType</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">kClass<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.reflect/-k-class/index.html">KClass</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">inputType<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-boolean/index.html">Boolean</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-boolean/index.html">Boolean</a></div><p class="paragraph">Checks if an additional type is valid Used when adding subtypes of interfaces Ignores <a href="../../../../graphglue-core/io.github.graphglue.model/-node/index-">Node</a> types, as those are handled manually</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph"><code class="lang-kotlin">true</code> if the class should be added to the additional types to generate</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue/main" data-filterable-set=":graphglue/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>k</span><wbr><span><span>Class</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the  class to check</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue/main" data-filterable-set=":graphglue/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>input</span><wbr><span><span>Type</span></span></u></div></span></div><div><div class="title"><p class="paragraph">shall an input type be generated</p></div></div></div></div></div></div></div>\n',p={},r="isValidAdditionalType",o={id:"api/graphglue/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks/is-valid-additional-type-",title:"isValidAdditionalType",description:"",source:"@site/docs/api/graphglue/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks/is-valid-additional-type-.mdx",sourceDirName:"api/graphglue/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks",slug:"/api/graphglue/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks/is-valid-additional-type-",permalink:"/api/graphglue/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks/is-valid-additional-type-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"delegate",permalink:"/api/graphglue/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks/delegate-"},next:{title:"isValidProperty",permalink:"/api/graphglue/io.github.graphglue.graphql/-graphglue-graph-q-l-configuration/-graphglue-schema-generator-hooks/is-valid-property-"}},g={},d=[];function h(a){const e={h1:"h1",...(0,i.R)(),...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"isvalidadditionaltype",children:"isValidAdditionalType"}),"\n",(0,n.jsx)(t.A,{dokkaHTML:l})]})}function c(a={}){const{wrapper:e}={...(0,i.R)(),...a.components};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(h,{...a})}):h(a)}}}]);