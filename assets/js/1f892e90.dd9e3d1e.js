"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[22815],{24300:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>g,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=n(74848),r=n(28453),s=n(52358);const p='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="generate-edge-graph-q-l-type-"><span class="token function">generateEdgeGraphQLType</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">nodeName<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span></span><span class="parameter ">transformer<span class="token operator">: </span><a href="../io.github.graphglue.graphql.schema/-schema-transformation-context/index-">SchemaTransformationContext</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><span data-unresolved-link="graphql.schema/GraphQLOutputType///PointingToDeclaration/">GraphQLOutputType</span></div><p class="paragraph">Generates the edge type for the <code class="lang-kotlin">edges</code> field of the connection. The generated type has a <code class="lang-kotlin">node</code> field, which returns the <a href="../io.github.graphglue.model/-node/index-">Node</a> associated with the edge, and the <code class="lang-kotlin">cursor</code> field, which allows getting nodes after / before the edge</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the generated type for the edges</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span><span>Name</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the name of the <a href="../io.github.graphglue.model/-node/index-">Node</a></p></div></div></div></div></div></div></div>\n',o={},i="generateEdgeGraphQLType",l={id:"api/graphglue-core/io.github.graphglue.connection/generate-edge-graph-q-l-type-",title:"generateEdgeGraphQLType",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.connection/generate-edge-graph-q-l-type-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.connection",slug:"/api/graphglue-core/io.github.graphglue.connection/generate-edge-graph-q-l-type-",permalink:"/api/graphglue-core/io.github.graphglue.connection/generate-edge-graph-q-l-type-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"generateConnectionGraphQLType",permalink:"/api/graphglue-core/io.github.graphglue.connection/generate-connection-graph-q-l-type-"},next:{title:"generateOrderGraphQLType",permalink:"/api/graphglue-core/io.github.graphglue.connection/generate-order-graph-q-l-type-"}},g={},c=[];function d(e){const a={h1:"h1",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h1,{id:"generateedgegraphqltype",children:"generateEdgeGraphQLType"}),"\n",(0,t.jsx)(s.A,{dokkaHTML:p})]})}function h(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);