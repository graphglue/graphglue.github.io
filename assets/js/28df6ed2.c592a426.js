"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[58298],{32578:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var n=i(74848),t=i(28453),o=i(52358);const s='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="check-if-relation-is-allowed-"><span class="token function">checkIfRelationIsAllowed</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">relationshipDefinition<span class="token operator">: </span><a href="../-relationship-definition/index-">RelationshipDefinition</a><span class="token punctuation">, </span></span><span class="parameter ">authorizationName<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-boolean/index.html">Boolean</a></div><p class="paragraph">Checks if a relation is allowed. A relation is allowed if allow on the parent side of the relation implies allow on the remote side of the relation. Can be used to improve authorization checking when fetching nested data structures. Allow is implied if the inverse relation (if existing) is allowed from related or if this is a one-side and allows from the related side (and has no other allow rules, neither other allow from related nor allow rules).</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph"><code class="lang-kotlin">true</code> iff allow for the remote nodes is implied</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>relationship</span><wbr><span><span>Definition</span></span></u></div></span></div><div><div class="title"><p class="paragraph">defines the relation to check</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>authorization</span><wbr><span><span>Name</span></span></u></div></span></div><div><div class="title"><p class="paragraph">name of the authorization, used to obtain the <a href="../../io.github.graphglue.authorization/-merged-authorization/index-">MergedAuthorization</a></p></div></div></div></div></div></div></div>\n',l={},r="checkIfRelationIsAllowed",c={id:"api/graphglue-core/io.github.graphglue.definition/-node-definition-collection/check-if-relation-is-allowed-",title:"checkIfRelationIsAllowed",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.definition/-node-definition-collection/check-if-relation-is-allowed-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.definition/-node-definition-collection",slug:"/api/graphglue-core/io.github.graphglue.definition/-node-definition-collection/check-if-relation-is-allowed-",permalink:"/api/graphglue-core/io.github.graphglue.definition/-node-definition-collection/check-if-relation-is-allowed-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"beanFactory",permalink:"/api/graphglue-core/io.github.graphglue.definition/-node-definition-collection/bean-factory-"},next:{title:"configurationProperties",permalink:"/api/graphglue-core/io.github.graphglue.definition/-node-definition-collection/configuration-properties-"}},p={},d=[];function h(e){const a={h1:"h1",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"checkifrelationisallowed",children:"checkIfRelationIsAllowed"}),"\n",(0,n.jsx)(o.A,{dokkaHTML:s})]})}function u(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);