"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[73106],{78857:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>l});var n=a(74848),o=a(28453),s=a(52358);const i='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">const </span><span class="token keyword">val </span><a href="-n-o-d-e_-f-e-t-c-h_-o-f-f-s-e-t-">NODE_FETCH_OFFSET</a><span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-int/index.html">Int</a><span class="token operator"> = </span><span class="token constant">1</span></div><p class="paragraph">Amount of nodes which are fetched additionally to determine if there are more nodes to come</p></div></div>\n',r={},c="NODE_FETCH_OFFSET",p={id:"api/graphglue-core/io.github.graphglue.data.execution/-n-o-d-e_-f-e-t-c-h_-o-f-f-s-e-t-",title:"NODE_FETCH_OFFSET",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-n-o-d-e_-f-e-t-c-h_-o-f-f-s-e-t-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-n-o-d-e_-f-e-t-c-h_-o-f-f-s-e-t-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-n-o-d-e_-f-e-t-c-h_-o-f-f-s-e-t-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"NODES_KEY",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-n-o-d-e-s_-k-e-y-"},next:{title:"NODE_KEY",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-n-o-d-e_-k-e-y-"}},d={},l=[];function h(e){const t={h1:"h1",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"node_fetch_offset",children:"NODE_FETCH_OFFSET"}),"\n",(0,n.jsx)(s.A,{dokkaHTML:i})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);