"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[65404],{7111:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>p,metadata:()=>l,toc:()=>d});var s=n(74848),r=n(28453),t=n(52358);const i='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="generate-query-entries-"><span class="token function">generateQueryEntries</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">fields<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-list/index.html">List</a><span class="token operator">&lt;</span><span data-unresolved-link="graphql.schema/SelectedField///PointingToDeclaration/">SelectedField</span><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">context<span class="token operator">: </span><a href="../../-field-fetching-context/index-">FieldFetchingContext</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-list/index.html">List</a><span class="token operator">&lt;</span><a href="../../-node-query-entry/index-">NodeQueryEntry</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span></div><p class="paragraph">Generates query entries for all fields in <a href="generate-query-entries-">fields</a></p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the generated query entries</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>fields</span></span></u></div></span></div><div><div class="title"><p class="paragraph">fields to create subqueries based of</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>context</span></span></u></div></span></div><div><div class="title"><p class="paragraph">provides the sub-selection set, result path and arguments</p></div></div></div></div></div></div></div>\n',p={},o="generateQueryEntries",l={id:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/-node-query-parser-instance/generate-query-entries-",title:"generateQueryEntries",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/-node-query-parser-instance/generate-query-entries-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/-node-query-parser-instance",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/-node-query-parser-instance/generate-query-entries-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/-node-query-parser-instance/generate-query-entries-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"generateOneNodeQuery",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/-node-query-parser-instance/generate-one-node-query-"},next:{title:"generateSearchQuery",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/-node-query-parser-instance/generate-search-query-"}},c={},d=[];function u(e){const a={h1:"h1",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h1,{id:"generatequeryentries",children:"generateQueryEntries"}),"\n",(0,s.jsx)(t.A,{dokkaHTML:i})]})}function g(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);