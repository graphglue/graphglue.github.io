"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[42083],{48377:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>h});var a=t(74848),n=t(28453),r=t(52358);const s='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">val </span><a href="type-">type</a><span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a></div><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>type</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the type of the relation (label associated with Neo4j relationship)</p></div></div></div></div></div></div></div>\n',o={},l="type",p={id:"api/graphglue-core/io.github.graphglue.definition/-relationship-definition/type-",title:"type",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.definition/-relationship-definition/type-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.definition/-relationship-definition",slug:"/api/graphglue-core/io.github.graphglue.definition/-relationship-definition/type-",permalink:"/api/graphglue-core/io.github.graphglue.definition/-relationship-definition/type-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"remotePropertySetter",permalink:"/api/graphglue-core/io.github.graphglue.definition/-relationship-definition/remote-property-setter-"},next:{title:"validate",permalink:"/api/graphglue-core/io.github.graphglue.definition/-relationship-definition/validate-"}},d={},h=[];function c(e){const i={h1:"h1",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.h1,{id:"type",children:"type"}),"\n",(0,a.jsx)(r.A,{dokkaHTML:s})]})}function g(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);