"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[74928],{9342:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>g,toc:()=>p});var a=t(74848),r=t(28453),i=t(52358);const o='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><div class="block"><div class="block"><span class="token annotation builtin">@</span><span data-unresolved-link="org.springframework.context.annotation/Bean///PointingToDeclaration/"><span class="token annotation builtin">Bean</span></span></div><div class="block"><span class="token annotation builtin">@</span><span data-unresolved-link="org.springframework.boot.autoconfigure.condition/ConditionalOnMissingBean///PointingToDeclaration/"><span class="token annotation builtin">ConditionalOnMissingBean</span></span></div></div><span class="token keyword">fun </span><a href="meta-node-filter-generator-"><span class="token function">metaNodeFilterGenerator</span></a><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">: </span><a href="../../io.github.graphglue.connection.filter.generator/-meta-node-filter-generator/index-">MetaNodeFilterGenerator</a></div><p class="paragraph">Provides the <a href="../-node-filter-generator/index-">NodeFilterGenerator</a> which generates filter entries for aggregated filters</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the <a href="../-node-filter-generator/index-">NodeFilterGenerator</a> which generates filter entries for aggregated filters</p></span></div></div>\n',l={},s="metaNodeFilterGenerator",g={id:"api/graphglue-core/io.github.graphglue.connection.filter/-graphglue-filter-configuration/meta-node-filter-generator-",title:"metaNodeFilterGenerator",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.connection.filter/-graphglue-filter-configuration/meta-node-filter-generator-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.connection.filter/-graphglue-filter-configuration",slug:"/api/graphglue-core/io.github.graphglue.connection.filter/-graphglue-filter-configuration/meta-node-filter-generator-",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter/-graphglue-filter-configuration/meta-node-filter-generator-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"additionalFilterNodeFilterGenerator",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter/-graphglue-filter-configuration/additional-filter-node-filter-generator-"},next:{title:"propertiesNodeFilterGenerator",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter/-graphglue-filter-configuration/properties-node-filter-generator-"}},c={},p=[];function d(e){const n={h1:"h1",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"metanodefiltergenerator",children:"metaNodeFilterGenerator"}),"\n",(0,a.jsx)(i.A,{dokkaHTML:o})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);