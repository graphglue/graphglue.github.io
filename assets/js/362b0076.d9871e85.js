"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[43347],{46093:(a,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>p,toc:()=>d});var s=e(74848),t=e(28453),i=e(52358);const o='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">nodes<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-list/index.html">List</a><span class="token operator">&lt;</span><a href="index-">T</a><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">pageInfo<span class="token operator">: </span><a href="../-page-info/index-">PageInfo</a><span class="token punctuation">, </span></span><span class="parameter ">totalCount<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-int/index.html">Int</a><span class="token operator">?</span><span class="token punctuation">, </span></span><span class="parameter ">order<span class="token operator">: </span><a href="../../io.github.graphglue.connection.order/-order/index-">Order</a><span class="token operator">&lt;</span><a href="index-">T</a><span class="token operator">&gt;</span></span></span><span class="token punctuation">)</span></div><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>nodes</span></span></u></div></span></div><div><div class="title"><p class="paragraph">all related nodes</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>page</span><wbr><span><span>Info</span></span></u></div></span></div><div><div class="title"><p class="paragraph">general connection information</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>total</span><wbr><span><span>Count</span></span></u></div></span></div><div><div class="title"><p class="paragraph">if fetched, the total amount of items in the relation</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>order</span></span></u></div></span></div><div><div class="title"><p class="paragraph">defines how the items are ordered in the connection, necessary for cursor definition</p></div></div></div></div></div></div></div>\n',r={},l="Connection",p={id:"api/graphglue-core/io.github.graphglue.connection.model/-connection/-connection-",title:"Connection",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.connection.model/-connection/-connection-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.connection.model/-connection",slug:"/api/graphglue-core/io.github.graphglue.connection.model/-connection/-connection-",permalink:"/api/graphglue-core/io.github.graphglue.connection.model/-connection/-connection-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"fromQueryResult",permalink:"/api/graphglue-core/io.github.graphglue.connection.model/-connection/-companion/from-query-result-"},next:{title:"edges",permalink:"/api/graphglue-core/io.github.graphglue.connection.model/-connection/edges-"}},c={},d=[];function u(a){const n={h1:"h1",...(0,t.R)(),...a.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"connection",children:"Connection"}),"\n",(0,s.jsx)(i.A,{dokkaHTML:o})]})}function g(a={}){const{wrapper:n}={...(0,t.R)(),...a.components};return n?(0,s.jsx)(n,{...a,children:(0,s.jsx)(u,{...a})}):u(a)}}}]);