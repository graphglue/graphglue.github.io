"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[92300],{89337:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>c,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var r=i(74848),t=i(28453),o=i(52358);const a='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">val </span><a href="return-expression-">returnExpression</a><span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/Expression///PointingToDeclaration/">Expression</span></div><p class="paragraph">Expression which can be used when creating a query using Cypher-DSL Fetches all necessary data to map the result to a <a href="../../io.github.graphglue.model/-node/index-">Node</a></p></div></div>\n',s={},p="returnExpression",d={id:"api/graphglue-core/io.github.graphglue.definition/-node-definition/return-expression-",title:"returnExpression",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.definition/-node-definition/return-expression-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.definition/-node-definition",slug:"/api/graphglue-core/io.github.graphglue.definition/-node-definition/return-expression-",permalink:"/api/graphglue-core/io.github.graphglue.definition/-node-definition/return-expression-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"relationshipDefinitions",permalink:"/api/graphglue-core/io.github.graphglue.definition/-node-definition/relationship-definitions-"},next:{title:"returnNodeName",permalink:"/api/graphglue-core/io.github.graphglue.definition/-node-definition/return-node-name-"}},u={},l=[];function g(e){const n={h1:"h1",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"returnexpression",children:"returnExpression"}),"\n",(0,r.jsx)(o.A,{dokkaHTML:a})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}}}]);