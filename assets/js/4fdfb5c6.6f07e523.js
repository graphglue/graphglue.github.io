"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[37287],{75350:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>p,metadata:()=>l,toc:()=>c});var n=a(74848),o=a(28453),i=a(52358);const r='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="get-relation-property-type-"><span class="token function">getRelationPropertyType</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">property<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.reflect/-k-property1/index.html">KProperty1</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token punctuation">, </span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.reflect/-k-class/index.html">KClass</a><span class="token operator">&lt;</span><span class="token keyword">out </span><a href="../../io.github.graphglue.model/-node/index-">Node</a><span class="token operator">&gt;</span></div><p class="paragraph">Gets the node type of a NodeProperty or NodeSetProperty</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the node type of the property</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>property</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the property to get the node type of</p></div></div></div></div></div></div></div>\n',p={},s="getRelationPropertyType",l={id:"api/graphglue-core/io.github.graphglue.definition/-node-definition/get-relation-property-type-",title:"getRelationPropertyType",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.definition/-node-definition/get-relation-property-type-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.definition/-node-definition",slug:"/api/graphglue-core/io.github.graphglue.definition/-node-definition/get-relation-property-type-",permalink:"/api/graphglue-core/io.github.graphglue.definition/-node-definition/get-relation-property-type-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"getNeo4jNameOfProperty",permalink:"/api/graphglue-core/io.github.graphglue.definition/-node-definition/get-neo4j-name-of-property-"},next:{title:"getRelationshipDefinitionByInverse",permalink:"/api/graphglue-core/io.github.graphglue.definition/-node-definition/get-relationship-definition-by-inverse-"}},d={},c=[];function g(e){const t={h1:"h1",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"getrelationpropertytype",children:"getRelationPropertyType"}),"\n",(0,n.jsx)(i.A,{dokkaHTML:r})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(g,{...e})}):g(e)}}}]);