"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[65466],{52279:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var r=s(74848),t=s(28453),n=s(52358);const i='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">internal </span><span class="token keyword">fun </span><a href="register-query-result-"><span class="token function">registerQueryResult</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">entry<span class="token operator">: </span><a href="../../io.github.graphglue.data.execution/-node-query-entry/index-">NodeQueryEntry</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">queryResult<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-any/index.html">Any</a><span class="token operator">?</span></span></span><span class="token punctuation">)</span></div><p class="paragraph">Registers the result of a query Used to cache the result of a query</p><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>entry</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the entry of the query</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>query</span><wbr><span><span>Result</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the result of the query</p></div></div></div></div></div></div></div>\n',l={},p="registerQueryResult",o={id:"api/graphglue-core/io.github.graphglue.model/-node/register-query-result-",title:"registerQueryResult",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.model/-node/register-query-result-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.model/-node",slug:"/api/graphglue-core/io.github.graphglue.model/-node/register-query-result-",permalink:"/api/graphglue-core/io.github.graphglue.model/-node/register-query-result-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"rawId",permalink:"/api/graphglue-core/io.github.graphglue.model/-node/raw-id-"},next:{title:"toString",permalink:"/api/graphglue-core/io.github.graphglue.model/-node/to-string-"}},u={},d=[];function c(e){const a={h1:"h1",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h1,{id:"registerqueryresult",children:"registerQueryResult"}),"\n",(0,r.jsx)(n.A,{dokkaHTML:i})]})}function g(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);