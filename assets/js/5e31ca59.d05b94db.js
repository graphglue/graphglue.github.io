"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[47359],{7952:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var s=t(74848),r=t(28453),n=t(52358);const i='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">nodes<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-list/index.html">List</a><span class="token operator">&lt;</span><a href="../../io.github.graphglue.model/-node/index-">Node</a><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">totalCount<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-int/index.html">Int</a><span class="token operator">?</span></span></span><span class="token punctuation">)</span></div><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>nodes</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the nodes returned by the query</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>total</span><wbr><span><span>Count</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the total count of nodes, if requested</p></div></div></div></div></div></div></div>\n',l={},o="PartialNodeQueryResult",p={id:"api/graphglue-core/io.github.graphglue.data.execution/-partial-node-query-result/-partial-node-query-result-",title:"PartialNodeQueryResult",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-partial-node-query-result/-partial-node-query-result-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-partial-node-query-result",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-partial-node-query-result/-partial-node-query-result-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-partial-node-query-result/-partial-node-query-result-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"PartialNodeQueryResult",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-partial-node-query-result/index-"},next:{title:"nodes",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-partial-node-query-result/nodes-"}},u={},d=[];function c(a){const e={h1:"h1",...(0,r.R)(),...a.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"partialnodequeryresult",children:"PartialNodeQueryResult"}),"\n",(0,s.jsx)(n.A,{dokkaHTML:i})]})}function g(a={}){const{wrapper:e}={...(0,r.R)(),...a.components};return e?(0,s.jsx)(e,{...a,children:(0,s.jsx)(c,{...a})}):c(a)}}}]);