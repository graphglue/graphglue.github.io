"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[45885],{70178:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var n=t(74848),i=t(28453),o=t(52358);const a='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">val </span><a href="entries-">entries</a><span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.enums/-enum-entries/index.html">EnumEntries</a><span class="token operator">&lt;</span><a href="index-">OrderDirection</a><span class="token operator">&gt;</span></div><p class="paragraph">Returns a representation of an immutable list of all enum entries, in the order they\'re declared.</p><p class="paragraph">This method may be used to iterate over the enum entries.</p></div></div>\n',s={},c="entries",d={id:"api/graphglue-core/io.github.graphglue.connection.order/-order-direction/entries-",title:"entries",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.connection.order/-order-direction/entries-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.connection.order/-order-direction",slug:"/api/graphglue-core/io.github.graphglue.connection.order/-order-direction/entries-",permalink:"/api/graphglue-core/io.github.graphglue.connection.order/-order-direction/entries-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"OrderDirection",permalink:"/api/graphglue-core/io.github.graphglue.connection.order/-order-direction/-order-direction-"},next:{title:"valueOf",permalink:"/api/graphglue-core/io.github.graphglue.connection.order/-order-direction/value-of-"}},p={},l=[];function u(e){const r={h1:"h1",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"entries",children:"entries"}),"\n",(0,n.jsx)(o.A,{dokkaHTML:a})]})}function g(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);