"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[63162],{34403:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var s=n(74848),t=n(28453),r=n(52358);const i='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="get-node-interfaces-"><span class="token function">getNodeInterfaces</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">nodeDefinition<span class="token operator">: </span><a href="../../io.github.graphglue.definition/-node-definition/index-">NodeDefinition</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-set/index.html">Set</a><span class="token operator">&lt;</span><span data-unresolved-link="graphql.schema/GraphQLTypeReference///PointingToDeclaration/">GraphQLTypeReference</span><span class="token operator">&gt;</span></div><p class="paragraph">Gets a set of all valid <a href="../../io.github.graphglue.model/-node/index-">Node</a> supertypes for a <a href="../../io.github.graphglue.definition/-node-definition/index-">NodeDefinition</a></p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">a set with <span data-unresolved-link="graphql.schema/GraphQLTypeReference///PointingToDeclaration/">GraphQLTypeReference</span>s for all found valid superclasses</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span><span>Definition</span></span></u></div></span></div><div><div class="title"><p class="paragraph">used to find valid superclasses</p></div></div></div></div></div></div></div>\n',o={},l="getNodeInterfaces",p={id:"api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/get-node-interfaces-",title:"getNodeInterfaces",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/get-node-interfaces-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer",slug:"/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/get-node-interfaces-",permalink:"/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/get-node-interfaces-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"filterDefinitionCollection",permalink:"/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/filter-definition-collection-"},next:{title:"includeSkipField",permalink:"/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/include-skip-field-"}},c={},d=[];function h(e){const a={h1:"h1",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h1,{id:"getnodeinterfaces",children:"getNodeInterfaces"}),"\n",(0,s.jsx)(r.A,{dokkaHTML:i})]})}function g(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);