"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[14887],{31981:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var r=s(74848),n=s(28453),t=s(52358);const o='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="generate-cursor-filter-expression-"><span class="token function">generateCursorFilterExpression</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">cursor<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-map/index.html">Map</a><span class="token operator">&lt;</span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-any/index.html">Any</a><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">orderContext<span class="token operator">: </span><a href="../-order-context/index-">OrderContext</a><span class="token punctuation">, </span></span><span class="parameter ">forwards<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-boolean/index.html">Boolean</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/Condition///PointingToDeclaration/">Condition</span></div><p class="paragraph">Generates a <span data-unresolved-link="org.neo4j.cypherdsl.core/Condition///PointingToDeclaration/">Condition</span> which can be used to filter for items before/after a specific cursor</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">an <span data-unresolved-link="org.neo4j.cypherdsl.core/Expression///PointingToDeclaration/">Expression</span> which can be used to filter for items after/before the provided <code class="lang-kotlin">cursor</code></p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>cursor</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the parsed cursor</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>order</span><wbr><span><span>Context</span></span></u></div></span></div><div><div class="title"><p class="paragraph">order in which the nodes will be sorted with variables, necessary to interpret cursor</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>forwards</span></span></u></div></span></div><div><div class="title"><p class="paragraph">if <code class="lang-kotlin">true</code>, filters for items after the cursor, otherwise for items before the cursor     (both inclusive)</p></div></div></div></div></div></div></div>\n',i={},l="generateCursorFilterExpression",p={id:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-cursor-filter-expression-",title:"generateCursorFilterExpression",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-cursor-filter-expression-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-cursor-filter-expression-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-cursor-filter-expression-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"extensionFieldLookup",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/extension-field-lookup-"},next:{title:"generateEmptyMainSubQueryResultStatement",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-empty-main-sub-query-result-statement-"}},c={},d=[];function u(e){const a={h1:"h1",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h1,{id:"generatecursorfilterexpression",children:"generateCursorFilterExpression"}),"\n",(0,r.jsx)(t.A,{dokkaHTML:o})]})}function g(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);