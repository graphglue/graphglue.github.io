"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[94844],{78679:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>d,contentTitle:()=>p,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=i(74848),r=i(28453),s=i(52358);const t='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">nodeDefinitionCollection<span class="token operator">: </span><a href="../../io.github.graphglue.definition/-node-definition-collection/index-">NodeDefinitionCollection</a><span class="token punctuation">, </span></span><span class="parameter ">filterDefinitionCollection<span class="token operator">: </span><a href="../../io.github.graphglue.connection.filter.definition/-filter-definition-collection/index-">FilterDefinitionCollection</a><span class="token operator">?</span><span class="token punctuation">, </span></span><span class="parameter ">objectMapper<span class="token operator">: </span><span data-unresolved-link="com.fasterxml.jackson.databind/ObjectMapper///PointingToDeclaration/">ObjectMapper</span></span></span><span class="token punctuation">)</span></div><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span>Definition</span><wbr><span><span>Collection</span></span></u></div></span></div><div><div class="title"><p class="paragraph">used to get the <a href="../../io.github.graphglue.definition/-node-definition/index-">NodeDefinition</a> for a specific <a href="../../io.github.graphglue.model/-node/index-">Node</a></p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>filter</span><wbr><span>Definition</span><wbr><span><span>Collection</span></span></u></div></span></div><div><div class="title"><p class="paragraph">used to get the <a href="../../io.github.graphglue.connection.filter.definition/-filter-definition/index-">FilterDefinition</a> for a specific <a href="../../io.github.graphglue.model/-node/index-">Node</a>, if existing</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>object</span><wbr><span><span>Mapper</span></span></u></div></span></div><div><div class="title"><p class="paragraph">used to parse cursors</p></div></div></div></div></div></div></div>\n',o={},p="NodeQueryParser",l={id:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/-node-query-parser-",title:"NodeQueryParser",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/-node-query-parser-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/-node-query-parser-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/-node-query-parser-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"generateSubQuery",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/-node-query-parser-instance/generate-sub-query-"},next:{title:"filterDefinitionCollection",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/filter-definition-collection-"}},d={},c=[];function u(e){const a={h1:"h1",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"nodequeryparser",children:"NodeQueryParser"}),"\n",(0,n.jsx)(s.A,{dokkaHTML:t})]})}function g(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);