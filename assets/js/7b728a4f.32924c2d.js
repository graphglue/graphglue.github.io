"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8016],{50907:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var n=i(74848),t=i(28453),s=i(52358);const r='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">fun </span><a href="parse-node-filter-"><span class="token function">parseNodeFilter</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">value<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-any/index.html">Any</a><span class="token operator">?</span><span class="token punctuation">, </span></span><span class="parameter ">permission<span class="token operator">: </span><a href="../../io.github.graphglue.authorization/-permission/index-">Permission</a><span class="token operator">?</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="../../io.github.graphglue.connection.filter.model/-node-filter/index-">NodeFilter</a></div><p class="paragraph">Parses a node filter Requires for each field that either</p><ul><li><p class="paragraph">a definition is present</p></li><li><p class="paragraph">it is an and/or/not meta filter field</p></li></ul><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the parsed filter</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>value</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the node filter to parse</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>permission</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the current read permission, used to only consider nodes in filters which match the permission</p></div></div></div></div></div></div></div>\n',l={},o="parseNodeFilter",p={id:"api/graphglue-core/io.github.graphglue.connection.filter.definition/-filter-definition/parse-node-filter-",title:"parseNodeFilter",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.connection.filter.definition/-filter-definition/parse-node-filter-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.connection.filter.definition/-filter-definition",slug:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-filter-definition/parse-node-filter-",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-filter-definition/parse-node-filter-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"parseFilter",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-filter-definition/parse-filter-"},next:{title:"toGraphQLType",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-filter-definition/to-graph-q-l-type-"}},d={},c=[];function u(e){const a={h1:"h1",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"parsenodefilter",children:"parseNodeFilter"}),"\n",(0,n.jsx)(s.A,{dokkaHTML:r})]})}function h(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);