"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[84106],{55255:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=t(74848),i=t(28453),r=t(52358);const s='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">abstract </span><span class="token keyword">fun </span><a href="generate-predicate-"><span class="token function">generatePredicate</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">variable<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/SymbolicName///PointingToDeclaration/">SymbolicName</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/OngoingListBasedPredicateFunction///PointingToDeclaration/">OngoingListBasedPredicateFunction</span></div><p class="paragraph">Generates the predicate which defines how nodes of the set have to match the filter, so that the overall filter evaluates to true Examples include all, any and none</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the builder for the predicate</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>variable</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the name of the variable based on which the predicate should be build</p></div></div></div></div></div></div></div>\n',o={},l="generatePredicate",c={id:"api/graphglue-core/io.github.graphglue.connection.filter.model/-node-relationship-filter-entry/generate-predicate-",title:"generatePredicate",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.connection.filter.model/-node-relationship-filter-entry/generate-predicate-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.connection.filter.model/-node-relationship-filter-entry",slug:"/api/graphglue-core/io.github.graphglue.connection.filter.model/-node-relationship-filter-entry/generate-predicate-",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.model/-node-relationship-filter-entry/generate-predicate-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"generateCondition",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.model/-node-relationship-filter-entry/generate-condition-"},next:{title:"permission",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.model/-node-relationship-filter-entry/permission-"}},p={},d=[];function h(e){const a={h1:"h1",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"generatepredicate",children:"generatePredicate"}),"\n",(0,n.jsx)(r.A,{dokkaHTML:s})]})}function g(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);