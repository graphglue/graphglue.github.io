"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[49660],{11198:(a,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>g,frontMatter:()=>p,metadata:()=>l,toc:()=>d});var e=n(74848),t=n(28453),o=n(52358);const i='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">filters<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-list/index.html">List</a><span class="token operator">&lt;</span><a href="../-cypher-condition-generator/index-">CypherConditionGenerator</a><span class="token operator">&gt;</span><span class="token operator"> = </span>emptyList()<span class="token punctuation">, </span></span><span class="parameter ">orderBy<span class="token operator">: </span><a href="../../io.github.graphglue.connection.order/-order/index-">Order</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">?</span><span class="token operator"> = </span>IdOrder<span class="token punctuation">, </span></span><span class="parameter ">after<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-map/index.html">Map</a><span class="token operator">&lt;</span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-any/index.html">Any</a><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token operator">?</span><span class="token operator"> = </span>null<span class="token punctuation">, </span></span><span class="parameter ">before<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-map/index.html">Map</a><span class="token operator">&lt;</span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-any/index.html">Any</a><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token operator">?</span><span class="token operator"> = </span>null<span class="token punctuation">, </span></span><span class="parameter ">first<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-int/index.html">Int</a><span class="token operator">?</span><span class="token operator"> = </span>null<span class="token punctuation">, </span></span><span class="parameter ">last<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-int/index.html">Int</a><span class="token operator">?</span><span class="token operator"> = </span>null<span class="token punctuation">, </span></span><span class="parameter ">skip<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-int/index.html">Int</a><span class="token operator">?</span><span class="token operator"> = </span>null<span class="token punctuation">, </span></span><span class="parameter ">fetchTotalCount<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-boolean/index.html">Boolean</a><span class="token operator"> = </span><span class="token boolean">true</span><span class="token punctuation">, </span></span><span class="parameter ">ignoreNodes<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-boolean/index.html">Boolean</a><span class="token operator"> = </span><span class="token boolean">false</span><span class="token punctuation">, </span></span><span class="parameter ">overrideIsAllQuery<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-boolean/index.html">Boolean</a><span class="token operator"> = </span><span class="token boolean">false</span></span></span><span class="token punctuation">)</span></div><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>filters</span></span></u></div></span></div><div><div class="title"><p class="paragraph">filters which are applied to filter out matched nodes</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>order</span><wbr><span><span>By</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the order in which nodes are ordered</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>after</span></span></u></div></span></div><div><div class="title"><p class="paragraph">if present, only nodes after this parsed cursor are fetched</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>before</span></span></u></div></span></div><div><div class="title"><p class="paragraph">if present, only properties before this parsed cursor are fetched</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>first</span></span></u></div></span></div><div><div class="title"><p class="paragraph">if present, only the first n nodes are fetched</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>last</span></span></u></div></span></div><div><div class="title"><p class="paragraph">if present, only the last n nodes are fetched</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>fetch</span><wbr><span>Total</span><wbr><span><span>Count</span></span></u></div></span></div><div><div class="title"><p class="paragraph">totalCount is only fetched if <code class="lang-kotlin">true</code></p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>ignore</span><wbr><span><span>Nodes</span></span></u></div></span></div><div><div class="title"><p class="paragraph">if <code class="lang-kotlin">true</code>, nodes are not fetched, only totalCount is fetched</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>override</span><wbr><span>Is</span><wbr><span>All</span><wbr><span><span>Query</span></span></u></div></span></div><div><div class="title"><p class="paragraph">if <code class="lang-kotlin">true</code>, this query is considered to fetch all nodes (use with caution)</p></div></div></div></div></div></div></div>\n',p={},r="NodeQueryOptions",l={id:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-options/-node-query-options-",title:"NodeQueryOptions",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-node-query-options/-node-query-options-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-options",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-options/-node-query-options-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-options/-node-query-options-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"NodeQueryOptions",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-options/index-"},next:{title:"after",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-options/after-"}},c={},d=[];function u(a){const s={h1:"h1",...(0,t.R)(),...a.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(s.h1,{id:"nodequeryoptions",children:"NodeQueryOptions"}),"\n",(0,e.jsx)(o.A,{dokkaHTML:i})]})}function g(a={}){const{wrapper:s}={...(0,t.R)(),...a.components};return s?(0,e.jsx)(s,{...a,children:(0,e.jsx)(u,{...a})}):u(a)}}}]);