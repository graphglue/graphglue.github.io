"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[12203],{72115:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var n=t(74848),s=t(28453),r=t(52358);const o='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="create-root-return-statement-"><span class="token function">createRootReturnStatement</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">builder<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/StatementBuilder.OngoingReading///PointingToDeclaration/">StatementBuilder.OngoingReading</span><span class="token punctuation">, </span></span><span class="parameter ">resultNodesCollected<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/SymbolicName///PointingToDeclaration/">SymbolicName</span><span class="token punctuation">, </span></span><span class="parameter ">otherResults<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-list/index.html">List</a><span class="token operator">&lt;</span><span data-unresolved-link="org.neo4j.cypherdsl.core/SymbolicName///PointingToDeclaration/">SymbolicName</span><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">totalCount<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/SymbolicName///PointingToDeclaration/">SymbolicName</span><span class="token operator">?</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="../-statement-with-symbolic-name/index-">StatementWithSymbolicName</a></div><p class="paragraph">Creates the return statement and builds the query. If totalCount is not fetched, <code class="lang-kotlin">null</code> is set as value for totalCount Must only be used for the root query</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the generated statement, the result name and the name of a collection with all raw nodes</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>builder</span></span></u></div></span></div><div><div class="title"><p class="paragraph">ongoing statement builder</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>result</span><wbr><span>Nodes</span><wbr><span><span>Collected</span></span></u></div></span></div><div><div class="title"><p class="paragraph">name for the variable containing a collection of all result nodes</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>other</span><wbr><span><span>Results</span></span></u></div></span></div><div><div class="title"><p class="paragraph">names of other results which should be returned, e.g. the names of the SubQuery results</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>total</span><wbr><span><span>Count</span></span></u></div></span></div><div><div class="title"><p class="paragraph">name for the variable under which totalCount should be saved</p></div></div></div></div></div></div></div>\n',i={},l="createRootReturnStatement",p={id:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/create-root-return-statement-",title:"createRootReturnStatement",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/create-root-return-statement-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/create-root-return-statement-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/create-root-return-statement-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"createRootNodeQuery",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/create-root-node-query-"},next:{title:"createSearchRootQuery",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/create-search-root-query-"}},c={},d=[];function u(e){const a={h1:"h1",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"createrootreturnstatement",children:"createRootReturnStatement"}),"\n",(0,n.jsx)(r.A,{dokkaHTML:o})]})}function g(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);