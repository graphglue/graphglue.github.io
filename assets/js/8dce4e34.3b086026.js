"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[82427],{81002:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=i(74848),t=i(28453),a=i(52358);const p='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">val </span><a href="supertype-node-definition-lookup-">supertypeNodeDefinitionLookup</a><span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-map/index.html">Map</a><span class="token operator">&lt;</span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-set/index.html">Set</a><span class="token operator">&lt;</span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token operator">&gt;</span><span class="token punctuation">, </span><a href="../-node-definition/index-">NodeDefinition</a><span class="token operator">&gt;</span></div><p class="paragraph">Lookup from set of all subtype GraphQL names to common parent type <a href="../-node-definition/index-">NodeDefinition</a> Can be used to generate Cypher queries and conditions more efficiently by not having to check for multiple different labels, but only for a common label Keys contain only GraphQL names of <a href="../-node-definition/index-">NodeDefinition</a>s which are object types in the schema (no interfaces)</p></div></div>\n',r={},s="supertypeNodeDefinitionLookup",l={id:"api/graphglue-core/io.github.graphglue.definition/-node-definition-collection/supertype-node-definition-lookup-",title:"supertypeNodeDefinitionLookup",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.definition/-node-definition-collection/supertype-node-definition-lookup-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.definition/-node-definition-collection",slug:"/api/graphglue-core/io.github.graphglue.definition/-node-definition-collection/supertype-node-definition-lookup-",permalink:"/api/graphglue-core/io.github.graphglue.definition/-node-definition-collection/supertype-node-definition-lookup-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"nodeDefinitionHierarchyLookup",permalink:"/api/graphglue-core/io.github.graphglue.definition/-node-definition-collection/node-definition-hierarchy-lookup-"},next:{title:"NodeSchemaException",permalink:"/api/graphglue-core/io.github.graphglue.definition/-node-schema-exception/index-"}},d={},c=[];function u(e){const n={h1:"h1",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"supertypenodedefinitionlookup",children:"supertypeNodeDefinitionLookup"}),"\n",(0,o.jsx)(a.A,{dokkaHTML:p})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);