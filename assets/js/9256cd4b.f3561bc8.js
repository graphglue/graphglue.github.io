"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[84476],{80543:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>d,contentTitle:()=>p,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=s(74848),t=s(28453),r=s(52358);const i='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="parse-node-entries-"><span class="token function">parseNodeEntries</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">nodeQuery<span class="token operator">: </span><a href="../-query-base/index-">QueryBase</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">node<span class="token operator">: </span><a href="../../io.github.graphglue.model/-node/index-">Node</a><span class="token punctuation">, </span></span><span class="parameter ">entriesResults<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-map/index.html">Map</a><span class="token operator">&lt;</span><a href="../-node-sub-query/index-">NodeSubQuery</a><span class="token punctuation">, </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-map/index.html">Map</a><span class="token operator">&lt;</span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span><span data-unresolved-link="org.neo4j.driver/Value///PointingToDeclaration/">Value</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">value<span class="token operator">: </span><span data-unresolved-link="org.neo4j.driver/Value///PointingToDeclaration/">Value</span></span></span><span class="token punctuation">)</span></div><p class="paragraph">Parses the entries of a <a href="parse-node-entries-">node</a> based on the provided <a href="parse-node-entries-">nodeQuery</a></p><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span><span>Query</span></span></u></div></span></div><div><div class="title"><p class="paragraph">defines the entries to parse</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>node</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the node of which the entries should be parsed</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>entries</span><wbr><span><span>Results</span></span></u></div></span></div><div><div class="title"><p class="paragraph">lookup from sub query and parent node id to related nodes (not parsed yet)</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>value</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the return value for the current <a href="parse-node-entries-">node</a></p></div></div></div></div></div></div></div>\n',o={},p="parseNodeEntries",l={id:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/parse-node-entries-",title:"parseNodeEntries",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/parse-node-entries-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/parse-node-entries-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/parse-node-entries-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"nodeLookup",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/node-lookup-"},next:{title:"parseNode",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/parse-node-"}},d={},c=[];function u(e){const a={h1:"h1",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"parsenodeentries",children:"parseNodeEntries"}),"\n",(0,n.jsx)(r.A,{dokkaHTML:i})]})}function g(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);