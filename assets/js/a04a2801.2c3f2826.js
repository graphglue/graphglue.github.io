"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[88834],{18895:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>p,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var s=n(74848),t=n(28453),i=n(52358);const r='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">onlyOnTypes<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-list/index.html">List</a><span class="token operator">&lt;</span><a href="../../io.github.graphglue.definition/-node-definition/index-">NodeDefinition</a><span class="token operator">&gt;</span><span class="token operator">?</span><span class="token punctuation">, </span></span><span class="parameter ">resultKeyPath<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span></span><span class="parameter ">fieldDefinition<span class="token operator">: </span><a href="index-">T</a></span></span><span class="token punctuation">)</span></div><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>only</span><wbr><span>On</span><wbr><span><span>Types</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the list of node types this entry should be fetched for</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>result</span><wbr><span>Key</span><wbr><span><span>Path</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the path to the key which fetches this field</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>field</span><wbr><span><span>Definition</span></span></u></div></span></div><div><div class="title"><p class="paragraph">definition of the queried field</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>T</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the type of the field definition</p></div></div></div></div></div></div></div>\n',l={},p="NodeQueryEntry",o={id:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-entry/-node-query-entry-",title:"NodeQueryEntry",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-node-query-entry/-node-query-entry-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-entry",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-entry/-node-query-entry-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-entry/-node-query-entry-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"NodeQueryEntry",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-entry/index-"},next:{title:"affectsNode",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-entry/affects-node-"}},d={},c=[];function u(e){const a={h1:"h1",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h1,{id:"nodequeryentry",children:"NodeQueryEntry"}),"\n",(0,s.jsx)(i.A,{dokkaHTML:r})]})}function h(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);