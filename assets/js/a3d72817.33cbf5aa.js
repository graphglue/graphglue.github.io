"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[25386],{85891:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var t=n(74848),i=n(28453),p=n(52358);const r='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">open </span><span class="token keyword">override </span><span class="token keyword">fun </span><a href="to-graph-q-l-type-"><span class="token function">toGraphQLType</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">inputTypeCache<span class="token operator">: </span><a href="../../io.github.graphglue.util/-cache-map/index-">CacheMap</a><span class="token operator">&lt;</span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span><span data-unresolved-link="graphql.schema/GraphQLInputType///PointingToDeclaration/">GraphQLInputType</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><span data-unresolved-link="graphql.schema/GraphQLInputType///PointingToDeclaration/">GraphQLInputType</span></div><p class="paragraph">Transforms this into a <span data-unresolved-link="graphql.schema/GraphQLInputType///PointingToDeclaration/">GraphQLInputType</span></p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the generated type which will be used in the schema</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>input</span><wbr><span>Type</span><wbr><span><span>Cache</span></span></u></div></span></div><div><div class="title"><p class="paragraph">cache of already existing input types, should be used to avoid type duplicates</p></div></div></div></div></div></div></div>\n',s={},o="toGraphQLType",l={id:"api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-property-filter-definition/to-graph-q-l-type-",title:"toGraphQLType",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-property-filter-definition/to-graph-q-l-type-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-property-filter-definition",slug:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-property-filter-definition/to-graph-q-l-type-",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-property-filter-definition/to-graph-q-l-type-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"parseEntry",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-property-filter-definition/parse-entry-"},next:{title:"NodeSetPropertyFilterDefinition",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-set-property-filter-definition/index-"}},c={},d=[];function h(e){const a={h1:"h1",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h1,{id:"tographqltype",children:"toGraphQLType"}),"\n",(0,t.jsx)(p.A,{dokkaHTML:r})]})}function u(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);