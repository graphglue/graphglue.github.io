"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[46296],{10879:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=n(74848),t=n(28453),s=n(52358);const p='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="generate-order-part-graph-q-l-type-"><span class="token function">generateOrderPartGraphQLType</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">nodeName<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span></span><span class="parameter ">orders<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-map/index.html">Map</a><span class="token operator">&lt;</span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span><a href="../io.github.graphglue.connection.order/-order-part/index-">OrderPart</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">transformer<span class="token operator">: </span><a href="../io.github.graphglue.graphql.schema/-schema-transformation-context/index-">SchemaTransformationContext</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><span data-unresolved-link="graphql.schema/GraphQLInputType///PointingToDeclaration/">GraphQLInputType</span></div><p class="paragraph">Generates the enum which defines all possible order fields</p><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span><span>Name</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the name of the <a href="../io.github.graphglue.model/-node/index-">Node</a></p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>orders</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the possible <a href="../io.github.graphglue.connection.order/-order-part/index-">OrderPart</a>s for the <a href="../io.github.graphglue.model/-node/index-">Node</a> type with the enum name as key</p></div></div></div></div></div></div></div>\n',i={},o="generateOrderPartGraphQLType",l={id:"api/graphglue-core/io.github.graphglue.connection/generate-order-part-graph-q-l-type-",title:"generateOrderPartGraphQLType",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.connection/generate-order-part-graph-q-l-type-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.connection",slug:"/api/graphglue-core/io.github.graphglue.connection/generate-order-part-graph-q-l-type-",permalink:"/api/graphglue-core/io.github.graphglue.connection/generate-order-part-graph-q-l-type-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"generateOrderGraphQLType",permalink:"/api/graphglue-core/io.github.graphglue.connection/generate-order-graph-q-l-type-"},next:{title:"generateSearchFieldDefinition",permalink:"/api/graphglue-core/io.github.graphglue.connection/generate-search-field-definition-"}},c={},d=[];function g(a){const e={h1:"h1",...(0,t.R)(),...a.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"generateorderpartgraphqltype",children:"generateOrderPartGraphQLType"}),"\n",(0,r.jsx)(s.A,{dokkaHTML:p})]})}function h(a={}){const{wrapper:e}={...(0,t.R)(),...a.components};return e?(0,r.jsx)(e,{...a,children:(0,r.jsx)(g,{...a})}):g(a)}}}]);