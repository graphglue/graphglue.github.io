"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[89664],{1961:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>p,metadata:()=>l,toc:()=>c});var i=n(74848),t=n(28453),s=n(52358);const r='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">name<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span></span><span class="parameter ">description<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span></span><span class="parameter ">type<span class="token operator">: </span><span data-unresolved-link="graphql.schema/GraphQLInputType///PointingToDeclaration/">GraphQLInputType</span><span class="token punctuation">, </span></span><span class="parameter ">neo4jName<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span></span><span class="parameter ">conditionGenerator<span class="token operator">: </span><span class="token punctuation">(</span>property<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/Property///PointingToDeclaration/">Property</span><span class="token punctuation">, </span>value<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/Parameter///PointingToDeclaration/">Parameter</span><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator"> -&gt; </span><span data-unresolved-link="org.neo4j.cypherdsl.core/Condition///PointingToDeclaration/">Condition</span></span></span><span class="token punctuation">)</span></div><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>name</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the name of the field on the <span data-unresolved-link="graphql.schema/GraphQLInputObjectType///PointingToDeclaration/">GraphQLInputObjectType</span></p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>description</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the description of the field</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>type</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the field type in the GraphQL schema, should require no additional parsing (e.g. String, Int, ...)</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>neo4j</span><wbr><span><span>Name</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the name of the property on the node in the database (might be different from <a href="../../../graphglue-core/io.github.graphglue.connection.filter.definition/-simple-filter-entry-definition/[60]init[62]-">name</a>)</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>condition</span><wbr><span><span>Generator</span></span></u></div></span></div><div><div class="title"><p class="paragraph">used to generate the condition which is used in the database, takes the property     and the parameter as input</p></div></div></div></div></div></div></div>\n',p={},o="SimpleFilterEntryDefinition",l={id:"api/graphglue-core/io.github.graphglue.connection.filter.definition/-simple-filter-entry-definition/-simple-filter-entry-definition-",title:"SimpleFilterEntryDefinition",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.connection.filter.definition/-simple-filter-entry-definition/-simple-filter-entry-definition-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.connection.filter.definition/-simple-filter-entry-definition",slug:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-simple-filter-entry-definition/-simple-filter-entry-definition-",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-simple-filter-entry-definition/-simple-filter-entry-definition-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"SimpleFilterEntryDefinition",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-simple-filter-entry-definition/index-"},next:{title:"conditionGenerator",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-simple-filter-entry-definition/condition-generator-"}},d={},c=[];function u(a){const e={h1:"h1",...(0,t.R)(),...a.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"simplefilterentrydefinition",children:"SimpleFilterEntryDefinition"}),"\n",(0,i.jsx)(s.A,{dokkaHTML:r})]})}function g(a={}){const{wrapper:e}={...(0,t.R)(),...a.components};return e?(0,i.jsx)(e,{...a,children:(0,i.jsx)(u,{...a})}):u(a)}}}]);