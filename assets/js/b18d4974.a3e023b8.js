"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[50868],{64089:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var o=a(74848),t=a(28453),i=a(52358);const s='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">open </span><span class="token keyword">override </span><span class="token keyword">fun </span><a href="accept-"><span class="token function">accept</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">visitor<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core.ast/Visitor///PointingToDeclaration/">Visitor</span></span></span><span class="token punctuation">)</span></div></div></div>\n',r={},c="accept",l={id:"api/graphglue-core/io.github.graphglue.connection.filter.model/-label-expression-condition/accept-",title:"accept",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.connection.filter.model/-label-expression-condition/accept-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.connection.filter.model/-label-expression-condition",slug:"/api/graphglue-core/io.github.graphglue.connection.filter.model/-label-expression-condition/accept-",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.model/-label-expression-condition/accept-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"LabelExpressionCondition",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.model/-label-expression-condition/-label-expression-condition-"},next:{title:"labelExpression",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.model/-label-expression-condition/label-expression-"}},p={},d=[];function u(e){const n={h1:"h1",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"accept",children:"accept"}),"\n",(0,o.jsx)(i.A,{dokkaHTML:s})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);