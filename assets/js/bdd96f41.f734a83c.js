"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[31829],{81133:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>o,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var t=i(74848),s=i(28453),r=i(52358);const n='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="register-field-data-fetcher-"><span class="token function">registerFieldDataFetcher</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">fieldDefinition<span class="token operator">: </span><a href="../../io.github.graphglue.definition/-field-definition/index-">FieldDefinition</a><span class="token punctuation">, </span></span><span class="parameter ">context<span class="token operator">: </span><a href="../-schema-transformation-context/index-">SchemaTransformationContext</a><span class="token punctuation">, </span></span><span class="parameter ">nodeDefinition<span class="token operator">: </span><a href="../../io.github.graphglue.definition/-node-definition/index-">NodeDefinition</a></span></span><span class="token punctuation">)</span></div><p class="paragraph">Registers a DataFetcher for a <a href="../../io.github.graphglue.definition/-field-definition/index-">FieldDefinition</a></p><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>field</span><wbr><span><span>Definition</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the definition of the field to create the data fetcher for</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>context</span></span></u></div></span></div><div><div class="title"><p class="paragraph">provides the <span data-unresolved-link="graphql.schema/GraphQLCodeRegistry///PointingToDeclaration/">GraphQLCodeRegistry</span></p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span><span>Definition</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the parent <a href="../../io.github.graphglue.definition/-node-definition/index-">NodeDefinition</a> of the extension field</p></div></div></div></div></div></div></div>\n',l={},p="registerFieldDataFetcher",d={id:"api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/register-field-data-fetcher-",title:"registerFieldDataFetcher",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/register-field-data-fetcher-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer",slug:"/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/register-field-data-fetcher-",permalink:"/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/register-field-data-fetcher-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"reactiveNeo4jClient",permalink:"/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/reactive-neo4j-client-"},next:{title:"renderer",permalink:"/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/renderer-"}},o={},c=[];function h(e){const a={h1:"h1",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h1,{id:"registerfielddatafetcher",children:"registerFieldDataFetcher"}),"\n",(0,t.jsx)(r.A,{dokkaHTML:n})]})}function g(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);