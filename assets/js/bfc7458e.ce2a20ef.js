"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[68797],{27300:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var s=n(74848),t=n(28453),i=n(52358);const r='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="generate-extension-fields-"><span class="token function">generateExtensionFields</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">nodeQuery<span class="token operator">: </span><a href="../-query-base/index-">QueryBase</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">nodeAlias<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/SymbolicName///PointingToDeclaration/">SymbolicName</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-map/index.html">Map</a><span class="token operator">&lt;</span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span><span data-unresolved-link="org.neo4j.cypherdsl.core/Expression///PointingToDeclaration/">Expression</span><span class="token operator">&gt;</span></div><p class="paragraph">Generate a map to fetch extension fields for a NodeQuery. Registers all extension fields in <a href="extension-field-lookup-">extensionFieldLookup</a></p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">a map of extension field names to their expressions</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span><span>Query</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the currently converted query</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span><span>Alias</span></span></u></div></span></div><div><div class="title"><p class="paragraph">name of the variable containing the node</p></div></div></div></div></div></div></div>\n',o={},l="generateExtensionFields",p={id:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-extension-fields-",title:"generateExtensionFields",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-extension-fields-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-extension-fields-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-extension-fields-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"generateEmptyMainSubQueryResultStatement",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-empty-main-sub-query-result-statement-"},next:{title:"generateLabelCondition",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-label-condition-"}},c={},d=[];function u(e){const a={h1:"h1",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h1,{id:"generateextensionfields",children:"generateExtensionFields"}),"\n",(0,s.jsx)(i.A,{dokkaHTML:r})]})}function g(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);