"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[21968],{30554:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var s=n(74848),t=n(28453),r=n(52358);const i='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">fun </span><a href="get-entry-"><span class="token function">getEntry</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">resultKey<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span></span><span class="parameter ">nodeDefinitionProvider<span class="token operator">: </span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator"> -&gt; </span><a href="../../io.github.graphglue.definition/-node-definition/index-">NodeDefinition</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="../-node-query-entry/index-">NodeQueryEntry</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span></div><p class="paragraph">Gets an entry by <a href="../-node-query-entry/result-key-path-">NodeQueryEntry.resultKeyPath</a>. As multiple subqueries can use the same <code class="lang-kotlin">resultKeyPath</code> if they use different <a href="../-node-query-entry/only-on-types-">NodeQueryEntry.onlyOnTypes</a>, a list of <a href="../../io.github.graphglue.definition/-node-definition/index-">NodeDefinition</a>s may be necessary to get the correct subquery. This is provided as provider as evaluation is expensive and only necessary in few cases</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the found subquery</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>result</span><wbr><span><span>Key</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the key of the subquery</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span>Definition</span><wbr><span><span>Provider</span></span></u></div></span></div><div><div class="title"><p class="paragraph">provides the set of <a href="../../io.github.graphglue.definition/-node-definition/index-">NodeDefinition</a>s for which the subquery must be fetched</p></div></div></div></div></div></div></div>\n',o={},p="getEntry",l={id:"api/graphglue-core/io.github.graphglue.data.execution/-query-base/get-entry-",title:"getEntry",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-query-base/get-entry-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-query-base",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-query-base/get-entry-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-query-base/get-entry-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"entryLookup",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-query-base/entry-lookup-"},next:{title:"SearchQuery",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-search-query/index-"}},u={},d=[];function c(e){const a={h1:"h1",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h1,{id:"getentry",children:"getEntry"}),"\n",(0,s.jsx)(r.A,{dokkaHTML:i})]})}function g(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);