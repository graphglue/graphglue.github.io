"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[57971],{30339:(a,e,s)=>{s.r(e),s.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>p,metadata:()=>o,toc:()=>c});var n=s(74848),r=s(28453),i=s(52358);const t='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">oldSchema<span class="token operator">: </span><span data-unresolved-link="graphql.schema/GraphQLSchema///PointingToDeclaration/">GraphQLSchema</span><span class="token punctuation">, </span></span><span class="parameter ">mappingContext<span class="token operator">: </span><span data-unresolved-link="org.springframework.data.neo4j.core.mapping/Neo4jMappingContext///PointingToDeclaration/">Neo4jMappingContext</span><span class="token punctuation">, </span></span><span class="parameter ">nodeDefinitionCollection<span class="token operator">: </span><a href="../../io.github.graphglue.definition/-node-definition-collection/index-">NodeDefinitionCollection</a><span class="token punctuation">, </span></span><span class="parameter ">dataFetcherFactoryProvider<span class="token operator">: </span><span data-unresolved-link="com.expediagroup.graphql.generator.execution/KotlinDataFetcherFactoryProvider///PointingToDeclaration/">KotlinDataFetcherFactoryProvider</span><span class="token punctuation">, </span></span><span class="parameter ">subFilterGenerator<span class="token operator">: </span><a href="../../io.github.graphglue.connection.filter.definition/-sub-filter-generator/index-">SubFilterGenerator</a><span class="token punctuation">, </span></span><span class="parameter ">includeSkipField<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-boolean/index.html">Boolean</a><span class="token punctuation">, </span></span><span class="parameter ">reactiveNeo4jClient<span class="token operator">: </span><span data-unresolved-link="org.springframework.data.neo4j.core/ReactiveNeo4jClient///PointingToDeclaration/">ReactiveNeo4jClient</span><span class="token punctuation">, </span></span><span class="parameter ">renderer<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core.renderer/Renderer///PointingToDeclaration/">Renderer</span><span class="token punctuation">, </span></span><span class="parameter ">additionalOrderBeans<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-map/index.html">Map</a><span class="token operator">&lt;</span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span><a href="../../io.github.graphglue.connection.order/-order-part/index-">OrderPart</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">)</span></div><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>old</span><wbr><span><span>Schema</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the schema to transform</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>mapping</span><wbr><span><span>Context</span></span></u></div></span></div><div><div class="title"><p class="paragraph">mapping context used to get type information from Neo4j</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span>Definition</span><wbr><span><span>Collection</span></span></u></div></span></div><div><div class="title"><p class="paragraph">collection of all <a href="../../io.github.graphglue.definition/-node-definition/index-">NodeDefinition</a>s</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>data</span><wbr><span>Fetcher</span><wbr><span>Factory</span><wbr><span><span>Provider</span></span></u></div></span></div><div><div class="title"><p class="paragraph">provides function and property data fetchers</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>sub</span><wbr><span>Filter</span><wbr><span><span>Generator</span></span></u></div></span></div><div><div class="title"><p class="paragraph">used to generate the filter entries</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>include</span><wbr><span>Skip</span><wbr><span><span>Field</span></span></u></div></span></div><div><div class="title"><p class="paragraph">if true, connections provide the non-standard skip field</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>reactive</span><wbr><span>Neo4j</span><wbr><span><span>Client</span></span></u></div></span></div><div><div class="title"><p class="paragraph">used to execute Cypher queries</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>renderer</span></span></u></div></span></div><div><div class="title"><p class="paragraph">used to render Cypher queries</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>additional</span><wbr><span>Order</span><wbr><span><span>Beans</span></span></u></div></span></div><div><div class="title"><p class="paragraph">lookup for additional order parts</p></div></div></div></div></div></div></div>\n',p={},l="DefaultSchemaTransformer",o={id:"api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/-default-schema-transformer-",title:"DefaultSchemaTransformer",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/-default-schema-transformer-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer",slug:"/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/-default-schema-transformer-",permalink:"/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/-default-schema-transformer-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"DefaultSchemaTransformer",permalink:"/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/index-"},next:{title:"additionalOrderBeans",permalink:"/api/graphglue-core/io.github.graphglue.graphql.schema/-default-schema-transformer/additional-order-beans-"}},d={},c=[];function u(a){const e={h1:"h1",...(0,r.R)(),...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"defaultschematransformer",children:"DefaultSchemaTransformer"}),"\n",(0,n.jsx)(i.A,{dokkaHTML:t})]})}function g(a={}){const{wrapper:e}={...(0,r.R)(),...a.components};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(u,{...a})}):u(a)}}}]);