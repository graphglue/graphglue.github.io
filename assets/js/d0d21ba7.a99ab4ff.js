"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6220],{52176:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var t=n(74848),s=n(28453),i=n(52358);const o='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="apply-total-count-if-required-"><span class="token function">applyTotalCountIfRequired</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">options<span class="token operator">: </span><a href="../-node-query-options/index-">NodeQueryOptions</a><span class="token punctuation">, </span></span><span class="parameter ">builder<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/StatementBuilder.OrderableOngoingReadingAndWithWithoutWhere///PointingToDeclaration/">StatementBuilder.OrderableOngoingReadingAndWithWithoutWhere</span><span class="token punctuation">, </span></span><span class="parameter ">allNodesCollected<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/SymbolicName///PointingToDeclaration/">SymbolicName</span><span class="token punctuation">, </span></span><span class="parameter ">additionalNames<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-list/index.html">List</a><span class="token operator">&lt;</span><span data-unresolved-link="org.neo4j.cypherdsl.core/SymbolicName///PointingToDeclaration/">SymbolicName</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-pair/index.html">Pair</a><span class="token operator">&lt;</span><span><span class="token annotation builtin">@</span><span data-unresolved-link="org.jetbrains.annotations/NotNull///PointingToDeclaration/"><span class="token annotation builtin">NotNull</span></span>&nbsp;</span><span data-unresolved-link="org.neo4j.cypherdsl.core/StatementBuilder.OrderableOngoingReadingAndWithWithoutWhere///PointingToDeclaration/">StatementBuilder.OrderableOngoingReadingAndWithWithoutWhere</span><span class="token punctuation">, </span><span><span class="token annotation builtin">@</span><span data-unresolved-link="org.jetbrains.annotations/NotNull///PointingToDeclaration/"><span class="token annotation builtin">NotNull</span></span>&nbsp;</span><span data-unresolved-link="org.neo4j.cypherdsl.core/SymbolicName///PointingToDeclaration/">SymbolicName</span><span class="token operator">?</span><span class="token operator">&gt;</span></div><p class="paragraph">Wraps the builder with <code class="lang-kotlin">applyTotalCount</code> if required by the options</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the new builder and the name of the variable containing the total count</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>options</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the options for the query</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>builder</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the builder to wrap</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>all</span><wbr><span>Nodes</span><wbr><span><span>Collected</span></span></u></div></span></div><div><div class="title"><p class="paragraph">name of the collection containing all nodes</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>additional</span><wbr><span><span>Names</span></span></u></div></span></div><div><div class="title"><p class="paragraph">additional names which should be added to the with statement</p></div></div></div></div></div></div></div>\n',l={},r="applyTotalCountIfRequired",p={id:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/apply-total-count-if-required-",title:"applyTotalCountIfRequired",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/apply-total-count-if-required-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/apply-total-count-if-required-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/apply-total-count-if-required-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"applySubQueryUnwind",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/apply-sub-query-unwind-"},next:{title:"applyTotalCount",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/apply-total-count-"}},d={},c=[];function u(a){const e={h1:"h1",...(0,s.R)(),...a.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"applytotalcountifrequired",children:"applyTotalCountIfRequired"}),"\n",(0,t.jsx)(i.A,{dokkaHTML:o})]})}function g(a={}){const{wrapper:e}={...(0,s.R)(),...a.components};return e?(0,t.jsx)(e,{...a,children:(0,t.jsx)(u,{...a})}):u(a)}}}]);