"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[17771],{22500:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var t=n(74848),a=n(28453),o=n(52358);const r='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">fun </span><a href="generate-authorization-condition-"><span class="token function">generateAuthorizationCondition</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">permission<span class="token operator">: </span><a href="../../io.github.graphglue.authorization/-permission/index-">Permission</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="../../io.github.graphglue.data.execution/-cypher-condition-generator/index-">CypherConditionGenerator</a></div><p class="paragraph">Provides a condition generator used to filter for related nodes the Permissions allows to access Used to only include nodes in relation filters which the permission allows to access. Prevents a filter information leak.</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the generated condition generator</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>permission</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the current read permission, used to only consider nodes in filters which match the permission</p></div></div></div></div></div></div></div>\n',s={},d="generateAuthorizationCondition",l={id:"api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-sub-filter-definition/generate-authorization-condition-",title:"generateAuthorizationCondition",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-sub-filter-definition/generate-authorization-condition-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-sub-filter-definition",slug:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-sub-filter-definition/generate-authorization-condition-",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-sub-filter-definition/generate-authorization-condition-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"NodeSubFilterDefinition",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-sub-filter-definition/-node-sub-filter-definition-"},next:{title:"parseEntry",permalink:"/api/graphglue-core/io.github.graphglue.connection.filter.definition/-node-sub-filter-definition/parse-entry-"}},c={},p=[];function u(e){const i={h1:"h1",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"generateauthorizationcondition",children:"generateAuthorizationCondition"}),"\n",(0,t.jsx)(o.A,{dokkaHTML:r})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);