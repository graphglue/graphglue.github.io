"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[84202],{88409:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var s=t(74848),r=t(28453),n=t(52358);const i='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">suspend </span><span class="token keyword">fun </span><a href="execute-partial-"><span class="token function">executePartial</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">query<span class="token operator">: </span><a href="../-partial-node-query/index-">PartialNodeQuery</a><span class="token punctuation">, </span></span><span class="parameter ">nodes<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-collection/index.html">Collection</a><span class="token operator">&lt;</span><a href="../../io.github.graphglue.model/-node/index-">Node</a><span class="token operator">&gt;</span></span></span><span class="token punctuation">)</span></div><p class="paragraph">Executes a partial query and registers the results in <a href="execute-partial-">nodes</a></p><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>query</span></span></u></div></span></div><div><div class="title"><p class="paragraph">defines the query to execute</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>nodes</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the nodes for which to execute subqueries and where results are registered</p></div></div></div></div></div></div></div>\n',o={},l="executePartial",p={id:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/execute-partial-",title:"executePartial",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/execute-partial-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/execute-partial-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/execute-partial-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"createSubReturnStatement",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/create-sub-return-statement-"},next:{title:"execute",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/execute-"}},c={},u=[];function d(e){const a={h1:"h1",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h1,{id:"executepartial",children:"executePartial"}),"\n",(0,s.jsx)(n.A,{dokkaHTML:i})]})}function g(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);