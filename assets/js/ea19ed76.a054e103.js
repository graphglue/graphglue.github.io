"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[46263],{83186:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>d,contentTitle:()=>p,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=s(74848),r=s(28453),t=s(52358);const i='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="generate-result-node-expression-"><span class="token function">generateResultNodeExpression</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">nodeExpression<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/Expression///PointingToDeclaration/">Expression</span><span class="token punctuation">, </span></span><span class="parameter ">nodeQuery<span class="token operator">: </span><a href="../-query-base/index-">QueryBase</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">nodeAlias<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/SymbolicName///PointingToDeclaration/">SymbolicName</span><span class="token punctuation">, </span></span><span class="parameter ">orderContext<span class="token operator">: </span><a href="../-order-context/index-">OrderContext</a><span class="token operator">?</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/MapExpression///PointingToDeclaration/">MapExpression</span></div><p class="paragraph">Generates the expression for the result node, including the node itself and extension fields</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the generated expression</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span><span>Expression</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the expression for the node itself</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span><span>Query</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the currently converted query</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span><span>Alias</span></span></u></div></span></div><div><div class="title"><p class="paragraph">name of the variable containing the node</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>order</span><wbr><span><span>Context</span></span></u></div></span></div><div><div class="title"><p class="paragraph">order to sort by with associated variables</p></div></div></div></div></div></div></div>\n',o={},p="generateResultNodeExpression",l={id:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-result-node-expression-",title:"generateResultNodeExpression",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-result-node-expression-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-result-node-expression-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-result-node-expression-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"generateOrderFields",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-order-fields-"},next:{title:"generateUniqueName",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/generate-unique-name-"}},d={},c=[];function u(e){const a={h1:"h1",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"generateresultnodeexpression",children:"generateResultNodeExpression"}),"\n",(0,n.jsx)(t.A,{dokkaHTML:i})]})}function g(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);