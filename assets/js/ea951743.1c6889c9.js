"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[40624],{47650:(a,e,s)=>{s.r(e),s.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>v,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=s(74848),r=s(28453),t=s(52358);const p='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="parse-query-result-internal-"><span class="token function">parseQueryResultInternal</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">record<span class="token operator">: </span><span data-unresolved-link="org.neo4j.driver/Record///PointingToDeclaration/">Record</span><span class="token punctuation">, </span></span><span class="parameter ">returnNodeName<span class="token operator">: </span><span data-unresolved-link="org.neo4j.cypherdsl.core/SymbolicName///PointingToDeclaration/">SymbolicName</span><span class="token punctuation">, </span></span><span class="parameter ">nodeQuery<span class="token operator">: </span><a href="../-query-base/index-">QueryBase</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="../-partial-node-query-result/index-">PartialNodeQueryResult</a></div><p class="paragraph">Parses the result of a query (a list of nodes, and optional a totalCount). Parses recursively</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the generated result</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>record</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the complete result of the query</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>return</span><wbr><span>Node</span><wbr><span><span>Name</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the name of the <a href="parse-query-result-internal-">record</a> entry which contains the main result of the query</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span><span>Query</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the query used to get the results</p></div></div></div></div></div><hr><div class="symbol monospace"><span class="token keyword">private </span><span class="token keyword">fun </span><a href="parse-query-result-internal-"><span class="token function">parseQueryResultInternal</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">value<span class="token operator">: </span><span data-unresolved-link="org.neo4j.driver/Value///PointingToDeclaration/">Value</span><span class="token punctuation">, </span></span><span class="parameter ">nodeQuery<span class="token operator">: </span><a href="../-query-base/index-">QueryBase</a><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">entriesResults<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-map/index.html">Map</a><span class="token operator">&lt;</span><a href="../-node-sub-query/index-">NodeSubQuery</a><span class="token punctuation">, </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-map/index.html">Map</a><span class="token operator">&lt;</span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-string/index.html">String</a><span class="token punctuation">, </span><span data-unresolved-link="org.neo4j.driver/Value///PointingToDeclaration/">Value</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="../-partial-node-query-result/index-">PartialNodeQueryResult</a></div><p class="paragraph">Parses the result of a query (a list of nodes, and optional a totalCount) Parses recursively</p><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>value</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the main result of the query, contains the nodes and the optional totalCount</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>node</span><wbr><span><span>Query</span></span></u></div></span></div><div><div class="title"><p class="paragraph">the query used to get the results</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>entries</span><wbr><span><span>Results</span></span></u></div></span></div><div><div class="title"><p class="paragraph">lookup from sub query and parent node id to related nodes (not parsed yet)</p></div></div></div></div></div></div></div>\n',l={},i="parseQueryResultInternal",o={id:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/parse-query-result-internal-",title:"parseQueryResultInternal",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/parse-query-result-internal-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/parse-query-result-internal-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/parse-query-result-internal-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"parseNode",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/parse-node-"},next:{title:"renderer",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-executor/renderer-"}},u={},d=[];function c(a){const e={h1:"h1",...(0,r.R)(),...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"parsequeryresultinternal",children:"parseQueryResultInternal"}),"\n",(0,n.jsx)(t.A,{dokkaHTML:p})]})}function v(a={}){const{wrapper:e}={...(0,r.R)(),...a.components};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(c,{...a})}):c(a)}}}]);