"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[52791],{19764:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>p,default:()=>g,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var s=n(74848),i=n(28453),r=n(52358);const t='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">fun </span><a href="generate-one-node-query-"><span class="token function">generateOneNodeQuery</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">definition<span class="token operator">: </span><a href="../../io.github.graphglue.definition/-node-definition/index-">NodeDefinition</a><span class="token punctuation">, </span></span><span class="parameter ">dataFetchingEnvironment<span class="token operator">: </span><span data-unresolved-link="graphql.schema/DataFetchingEnvironment///PointingToDeclaration/">DataFetchingEnvironment</span><span class="token punctuation">, </span></span><span class="parameter ">additionalConditions<span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-list/index.html">List</a><span class="token operator">&lt;</span><a href="../-cypher-condition-generator/index-">CypherConditionGenerator</a><span class="token operator">&gt;</span><span class="token punctuation">, </span></span><span class="parameter ">requiredPermission<span class="token operator">: </span><a href="../../io.github.graphglue.authorization/-permission/index-">Permission</a><span class="token operator">?</span></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="../-node-query/index-">NodeQuery</a></div><p class="paragraph">Generates a <a href="../-node-query/index-">NodeQuery</a> which loads a single <a href="../../io.github.graphglue.model/-node/index-">Node</a> Can use the <code class="lang-kotlin">dataFetchingEnvironment</code> to fetch a subtree of node</p><span class="kdoc-tag"><h4 class="">Return</h4><p class="paragraph">the generated <a href="../-node-query/index-">NodeQuery</a> to load the node</p></span><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>definition</span></span></u></div></span></div><div><div class="title"><p class="paragraph"><a href="../../io.github.graphglue.definition/-node-definition/index-">NodeDefinition</a> of the node to load</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>data</span><wbr><span>Fetching</span><wbr><span><span>Environment</span></span></u></div></span></div><div><div class="title"><p class="paragraph">can optionally be provided to fetch a subtree of nodes</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>additional</span><wbr><span><span>Conditions</span></span></u></div></span></div><div><div class="title"><p class="paragraph">list of conditions which are applied to filter the returned node</p></div></div></div></div><div class="table-row" data-filterable-current=":graphglue-core/main" data-filterable-set=":graphglue-core/main"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>required</span><wbr><span><span>Permission</span></span></u></div></span></div><div><div class="title"><p class="paragraph">optional required permission</p></div></div></div></div></div></div></div>\n',o={},p="generateOneNodeQuery",d={id:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/generate-one-node-query-",title:"generateOneNodeQuery",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/generate-one-node-query-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser",slug:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/generate-one-node-query-",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/generate-one-node-query-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"generateManyNodeQuery",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/generate-many-node-query-"},next:{title:"generateSearchQuery",permalink:"/api/graphglue-core/io.github.graphglue.data.execution/-node-query-parser/generate-search-query-"}},l={},c=[];function u(e){const a={h1:"h1",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h1,{id:"generateonenodequery",children:"generateOneNodeQuery"}),"\n",(0,s.jsx)(r.A,{dokkaHTML:t})]})}function g(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);