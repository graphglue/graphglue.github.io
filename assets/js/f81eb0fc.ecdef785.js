"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[15148],{34842:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>p,contentTitle:()=>u,default:()=>c,frontMatter:()=>n,metadata:()=>l,toc:()=>g});var t=a(74848),o=a(28453),i=a(52358);const s='\n  \n  <div class="cover ">\n    \n  </div>\n  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":graphglue-core/main"><div class="symbol monospace"><span class="token keyword">val </span><a href="sub-queries-">subQueries</a><span class="token operator">: </span><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/-mutable-list/index.html">MutableList</a><span class="token operator">&lt;</span><a href="../../io.github.graphglue.data.execution/-node-sub-query/index-">NodeSubQuery</a><span class="token operator">&gt;</span></div><p class="paragraph">Subqueries to execute</p></div></div>\n',n={},u="subQueries",l={id:"api/graphglue-core/io.github.graphglue.model.property/-lazy-loading-subquery-generator/sub-queries-",title:"subQueries",description:"",source:"@site/docs/api/graphglue-core/io.github.graphglue.model.property/-lazy-loading-subquery-generator/sub-queries-.mdx",sourceDirName:"api/graphglue-core/io.github.graphglue.model.property/-lazy-loading-subquery-generator",slug:"/api/graphglue-core/io.github.graphglue.model.property/-lazy-loading-subquery-generator/sub-queries-",permalink:"/api/graphglue-core/io.github.graphglue.model.property/-lazy-loading-subquery-generator/sub-queries-",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"parentNodeDefinition",permalink:"/api/graphglue-core/io.github.graphglue.model.property/-lazy-loading-subquery-generator/parent-node-definition-"},next:{title:"toSubQuery",permalink:"/api/graphglue-core/io.github.graphglue.model.property/-lazy-loading-subquery-generator/to-sub-query-"}},p={},g=[];function d(e){const r={h1:"h1",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"subqueries",children:"subQueries"}),"\n",(0,t.jsx)(i.A,{dokkaHTML:s})]})}function c(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);