"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1889],{50187:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>c,frontMatter:()=>t,metadata:()=>d,toc:()=>l});var r=i(74848),o=i(28453);const t={sidebar_position:2},s="Modeling",d={id:"docs/modeling",title:"Modeling",description:"As this library is based on GraphQL Kotlin and Spring Data Neo4j, the modeling is mostly a merge of their approaches.",source:"@site/docs/docs/modeling.mdx",sourceDirName:"docs",slug:"/docs/modeling",permalink:"/docs/modeling",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docSidebar",previous:{title:"Getting started",permalink:"/"},next:{title:"Authorization",permalink:"/docs/authorization"}},a={},l=[{value:"Overview",id:"overview",level:2},{value:"Class Definition",id:"class-definition",level:2},{value:"Properties",id:"properties",level:2},{value:"Functions",id:"functions",level:2},{value:"Relationships",id:"relationships",level:2},{value:"GraphGlue relationships",id:"graphglue-relationships",level:3},{value:"Spring Data Neo4j relationships",id:"spring-data-neo4j-relationships",level:3},{value:"Comparison",id:"comparison",level:3},{value:"Inheritance",id:"inheritance",level:2},{value:"Ordering &amp; Filtering",id:"ordering--filtering",level:2},{value:"Ordering",id:"ordering",level:3},{value:"Additional orders",id:"additional-orders",level:4},{value:"Filtering",id:"filtering",level:3},{value:"Filters for properties",id:"filters-for-properties",level:4},{value:"Additional filters",id:"additional-filters",level:4},{value:"Node filter generators",id:"node-filter-generators",level:4}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"modeling",children:"Modeling"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["As this library is based on GraphQL Kotlin and Spring Data Neo4j, the modeling is mostly a merge of their approaches.\nAlmost all of their features still work when using this library. For more information on their features, please have a look at\n",(0,r.jsx)(n.a,{href:"https://opensource.expediagroup.com/graphql-kotlin/docs/schema-generator/schema-generator-getting-started",children:"GraphQL Kotlin"})," and\n",(0,r.jsx)(n.a,{href:"https://docs.spring.io/spring-data/neo4j/docs/current/reference/html/#mapping",children:"Spring Data Neo4j"})]})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["Consider a simple domain model, consisting of movies, actors and directors:\nEach movie has exactly one director, and any amount of actors.\nGiven is the code for the ",(0,r.jsx)(n.code,{children:"Movie"})," node:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'@DomainNode("movies")                                 // (1)\n@Authorization("READ")                                // (2)\nclass Movie(\n    @OrderProperty @FilterProperty val name: String,  // (3)\n    internal val releaseYear: Int                     // (4)\n) : Node() {                                          // (5)\n    \n    @NodeRelationship("DIRECTOR", Direction.OUTGOING) // (6)\n    val director by NodeProperty<Director>()\n    \n    @NodeRelationship("ACTOR", Direction.OUTGOING)    // (7)\n    val actors by NodeSetProperty<Actor>()\n    \n    fun actorsCount() = actors.size                   // (8)\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Necessary annotation for all ",(0,r.jsx)(n.code,{children:"Node"})," classes. If the ",(0,r.jsx)(n.code,{children:"name"})," parameter is provided, a connection-like query with the name ",(0,r.jsx)(n.code,{children:"name"})," is exposed."]}),"\n",(0,r.jsxs)(n.li,{children:["Specifies the ",(0,r.jsx)(n.code,{children:"READ"})," permission for this Node, for more info, see ",(0,r.jsx)(n.a,{href:"./authorization",children:"Authorization"})]}),"\n",(0,r.jsxs)(n.li,{children:["Property which is exposed in the GraphQL schema. As it is annotated with both ",(0,r.jsx)(n.code,{children:"@OrderProperty"})," and ",(0,r.jsx)(n.code,{children:"@FilterProperty"}),", connections of type ",(0,r.jsx)(n.code,{children:"Movie"})," can both be filtered and ordered by this property."]}),"\n",(0,r.jsx)(n.li,{children:"Internal property NOT exposed in the GraphQL schema."}),"\n",(0,r.jsxs)(n.li,{children:["Each class needs to extend ",(0,r.jsx)(n.code,{children:"Node"})," in order to use any GraphGlue specific features."]}),"\n",(0,r.jsxs)(n.li,{children:["An outgoing relation of type ",(0,r.jsx)(n.code,{children:"Director"}),", each movie has exactly one director."]}),"\n",(0,r.jsxs)(n.li,{children:["An outgoing relation of type ",(0,r.jsx)(n.code,{children:"Set<Actor>"}),". In the GraphQL schema, it is exposed as ",(0,r.jsx)(n.code,{children:"ActorConnection"})]}),"\n",(0,r.jsx)(n.li,{children:"Function exposed as field in the GraphQL schema."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"class-definition",children:"Class Definition"}),"\n",(0,r.jsxs)(n.p,{children:["Each node class both has to be annotated with ",(0,r.jsx)(n.code,{children:"@DomainNode"})," and extend ",(0,r.jsx)(n.code,{children:"io.github.graphglue.model.Node"}),".\nIf any of those conditions is missing, GraphGlue-specific features might not work."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["This does not mean that you never should use classes which fullfill neither of those criteries.\nFor example, a non-node class can be used as type for properties with a struct-like type: it is still persisted in the database as node, however, in the GraphQL schema, it does not implement ",(0,r.jsx)(n.code,{children:"Node"}),", meaning it is not possible to retrieve it via the ",(0,r.jsx)(n.code,{children:"node"})," query."]})}),"\n",(0,r.jsxs)(n.p,{children:["The Node class also defines an id. In Kotlin, it is possible to access the id using the ",(0,r.jsx)(n.code,{children:"rawId"})," String property.\nIt is not possible to manually assign an id, as a id is automatically generated when the node is first saved.\nHowever, the generation can be customized by providing a bean with the name ",(0,r.jsx)(n.code,{children:"io.github.graphglue.model.NODE_ID_GENERATOR_BEAN"})," and the type ",(0,r.jsx)(n.code,{children:"IdGenerator<String>"}),".\nBy default, a random UUID is generated."]}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(n.p,{children:["Properties are both used to expose fields in the GraphQL schema, and save properties on the node in the database.\nBy default, both Spring Data Neo4j and GraphQL Kotlin use the name of the property as name, however, the name in the GraphQL schema can be changed by annotating it with ",(0,r.jsx)(n.code,{children:'@GraphQLName("name")'}),", the name of the property in the database can be changed by annotating it with ",(0,r.jsx)(n.code,{children:'@Property("name")'}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["Spring Data Neo4j and GraphQL Kotlin use different visibilities.\nWhile properties backed by a field (this includes delegated properties) are saved in the database, GraphQL Kotlin only exposes ",(0,r.jsx)(n.code,{children:"public"})," properties not annotated with ",(0,r.jsx)(n.code,{children:"@GraphQLIgnore"}),"."]})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["GraphGlue automatically adds all injected ",(0,r.jsx)(n.code,{children:"GraphQLType"}),"s to the generated schema.\nThis allows for injecting custom scalars, and then using the name in ",(0,r.jsx)(n.code,{children:"@GraphQLType"})," annotations."]})}),"\n",(0,r.jsx)(n.p,{children:"The used type must both be supported by GraphQL Kotlin and Spring Data Neo4j, however, both libaries provide extension mechanisms which allow you to support additional types."}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.p,{children:"Like properties, functions can be used to expose field in the GraphQL schema."}),"\n",(0,r.jsx)(n.h2,{id:"relationships",children:"Relationships"}),"\n",(0,r.jsx)(n.p,{children:"GraphGlue supports two types of relationships: native GraphGlue relationships, and Spring Data Neo4j relationships.\nBoth support many-to-many, many-to-one and one-to-one relationships by combining one- and many-sides of relationships.\nBoth bidirectional (defining both ends) and unidirectional (defining only one end) relationships are supported.\nNote that for bidirectional relationships, both sides must use the same type of relationship, it is not possible to combine GraphGlue with Spring Data Neo4j relationship sides."}),"\n",(0,r.jsx)(n.h3,{id:"graphglue-relationships",children:"GraphGlue relationships"}),"\n",(0,r.jsx)(n.p,{children:"Declaration of one-sides of relationships"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"@NodeRelationship(label, direction)\nval propertyName by NodeProperty<NodeType>()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Declaration of many-sides of relationships"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"@NodeRelationship(label, direction)\nval propertyName by NodeSetProperty<NodeType>()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["where ",(0,r.jsx)(n.code,{children:"label"})," is a ",(0,r.jsx)(n.code,{children:"String"}),", and direction is either ",(0,r.jsx)(n.code,{children:"Direction.INCOMING"})," or ",(0,r.jsx)(n.code,{children:"Direction.OUTGOING"}),".\nRelations are always directional, due to being directional in Neo4j.\nWhen modeling a bidirectional relationship, one side needs to use ",(0,r.jsx)(n.code,{children:"Direction.INCOMING"}),", while the other needs to use ",(0,r.jsx)(n.code,{children:"Direction.OUTGOING"}),".\nThe direction is considered an implementation detail and not exposed in the GraphQL API."]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["To actually get the content of a property, you have to use the call operator on the property (e.g. ",(0,r.jsx)(n.code,{children:"node.manyProperty().add(addedNode)"}),").\nThis is necessary, as lazy loading is done asynchronous, and properties cannot be marked currently with ",(0,r.jsx)(n.code,{children:"suspend"}),".\nTherefore, on invoking, the property is - if necessary - loaded from the database."]})}),"\n",(0,r.jsxs)(n.p,{children:["On save, all relationships are saved. Save cascades down added entities, but removed ones.\nExample: If the one side has initially the value ",(0,r.jsx)(n.code,{children:"node1"}),", which then is replaced with ",(0,r.jsx)(n.code,{children:"node2"}),", when saving, ",(0,r.jsx)(n.code,{children:"node2"}),' is saved (as it was "added"), while ',(0,r.jsx)(n.code,{children:"node1"})," is not."]}),"\n",(0,r.jsx)(n.h3,{id:"spring-data-neo4j-relationships",children:"Spring Data Neo4j relationships"}),"\n",(0,r.jsx)(n.p,{children:"Declaration of one-sides of relationships"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"@Relationship(label, direction)\nval propertyName: NodeType\n"})}),"\n",(0,r.jsx)(n.p,{children:"Declaration of many-sides of relationships"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"@Relationship(label, direction)\nval propertyName: List<NodeType>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For more information, see ",(0,r.jsx)(n.a,{href:"https://docs.spring.io/spring-data/neo4j/docs/current/reference/html/#mapping.annotations.relationship",children:"Connecting nodes: @Relationship"})]}),"\n",(0,r.jsx)(n.h3,{id:"comparison",children:"Comparison"}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{}),(0,r.jsx)("th",{children:"GraphGlue"}),(0,r.jsx)("th",{children:"Spring Data Neo4j "})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"GraphQL representation"}),(0,r.jsx)("th",{children:"One sides are represented by their appropriate type. Many sides are represented by connection types, supporting pagination, filtering and ordering"}),(0,r.jsx)("th",{children:"One sides are represented by their appropriate type. Many sides are represented as GraphQL list, without pagination, filtering or ordering support"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Lazy loading"}),(0,r.jsx)("th",{children:(0,r.jsx)(n.p,{children:"Only lazy loading is supported. Relations are automatically loaded when accessed.\nNote: when fetching data for GraphQL, the whole subtree is loaded at once using one Cypher query, preventing the n+1 problem.\nLazy loading is done asynchronous."})}),(0,r.jsx)("th",{children:(0,r.jsxs)(n.p,{children:["No lazy loading is supported, all relationships are eagerly loaded, which can result in large subgraphs being loaded. To prevent this, you may use\n",(0,r.jsx)("a",{href:"https://docs.spring.io/spring-data/neo4j/docs/current/reference/html/#projections",rel:"noopener noreferer",children:" Projections"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Matching of opposite sides"}),(0,r.jsxs)("th",{colSpan:"2",children:["Opposite sides are matched if the ",(0,r.jsx)(n.code,{children:"label"})," is the same, but the ",(0,r.jsx)(n.code,{children:"direction"})," the opposite."]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"inheritance",children:"Inheritance"}),"\n",(0,r.jsxs)(n.p,{children:["Currently, only inheriting from abstract classes is supported.\nSpecifically, inheriting from ",(0,r.jsx)(n.code,{children:"open"}),", non-",(0,r.jsx)(n.code,{children:"abstract"})," classes is only supported if it is marked with ",(0,r.jsx)(n.code,{children:"@GraphQLIgnore"}),".\nInheriting from interfaces is possible, however none of the GraphGlue annotations (",(0,r.jsx)(n.code,{children:"@DomainNode"}),", ",(0,r.jsx)(n.code,{children:"@Authorization"}),", ",(0,r.jsx)(n.code,{children:"@AdditionalFilter"}),", ",(0,r.jsx)(n.code,{children:"@AdditionalOrder"}),") is supported there, however, it can e.g. be used to share common ",(0,r.jsx)(n.code,{children:"@GraphQLDescriptions"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"@DomainNode"})," annotation is not inherited and has to be present on all node types."]})}),"\n",(0,r.jsx)(n.h2,{id:"ordering--filtering",children:"Ordering & Filtering"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["For more information on how to use ordering and filtering in GraphQL, see ",(0,r.jsx)(n.a,{href:"./connections",children:"Connections"})]})}),"\n",(0,r.jsx)(n.h3,{id:"ordering",children:"Ordering"}),"\n",(0,r.jsxs)(n.p,{children:["All nodes can be ordered by id.\nAdditionally, nodes of a specific type can also be ordered by all properties annotated with ",(0,r.jsx)(n.code,{children:"@OrderProperty"}),".\nAs those might not be unique, the ",(0,r.jsx)(n.code,{children:"id"})," is used to create a strict total order.\nBy default, all data types which are ",(0,r.jsx)(n.a,{href:"https://neo4j.com/docs/cypher-manual/current/syntax/operators/#cypher-ordering",children:"comparable in Cypher"})," are supported.\nFurthermore, ",(0,r.jsx)(n.code,{children:"NodeProperty<*>"})," backed properties allow ordering by all orderable properties of the related node type, excluding ",(0,r.jsx)(n.code,{children:"NodeProperty<*>"})," backed properties."]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["Ordering on ",(0,r.jsx)(n.code,{children:"NodeProperty<*>"})," does ",(0,r.jsx)(n.strong,{children:"NOT"})," take the authorization system into account.\nBy making such a property orderable, it is possible to leak information about non-visible nodes.\nOnly use when access to the related node is automatically granted!"]})}),"\n",(0,r.jsx)(n.h4,{id:"additional-orders",children:"Additional orders"}),"\n",(0,r.jsxs)(n.p,{children:["With the ",(0,r.jsx)(n.code,{children:'AdditionalOrder("beanName")'})," annotation, property independent orders can be defined.\nThis can for instance be used to order by a complex condition.\nA Spring bean with the specified name and type ",(0,r.jsx)(n.code,{children:"OrderPart"})," has to be provided."]}),"\n",(0,r.jsx)(n.h3,{id:"filtering",children:"Filtering"}),"\n",(0,r.jsx)(n.p,{children:"Filters are generated for specific node types.\nThese filters are generated by concatenating property-based filter fields and additional filter fields.\nThen, for each type, a meta filter is created, which allows joining filters by and, or and not:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"input TypeNodeFilterInput {\n    # filter fields\n}\n\ninput TypeFilterInput {\n    and: [TypeFilterInput!]\n    or: [TypeFilterInput!]\n    not: TypeFilterInput\n    node: TypeNodeFilterInput\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Exactly one of the specified fields has to be provided."}),"\n",(0,r.jsx)(n.h4,{id:"filters-for-properties",children:"Filters for properties"}),"\n",(0,r.jsxs)(n.p,{children:["Properties can be annotated with ",(0,r.jsx)(n.code,{children:"@FilterProperty"})," to allow filtering by a specific property. By default, this is supported for properties with the following types:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"String"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Int"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Double"})," (Float in GraphQL)"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Boolean"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"ID"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"by NodeProperty<*>"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"by NodeSetProperty<*>"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Input fields of filters are always optional. All the present fields are then joined by ",(0,r.jsx)(n.code,{children:"&&"}),".",(0,r.jsx)(n.br,{}),"\n","The input fields of the filter depends on the type: For ",(0,r.jsx)(n.code,{children:"Boolean"})," and ",(0,r.jsx)(n.code,{children:"ID"}),", only ",(0,r.jsx)(n.code,{children:"eq"})," and ",(0,r.jsx)(n.code,{children:"in"})," are available.\nFor all comparable types (",(0,r.jsx)(n.code,{children:"Int"}),", ",(0,r.jsx)(n.code,{children:"Double"})," and ",(0,r.jsx)(n.code,{children:"String"}),"), ",(0,r.jsx)(n.code,{children:"lt"}),", ",(0,r.jsx)(n.code,{children:"lte"}),", ",(0,r.jsx)(n.code,{children:"gt"})," and ",(0,r.jsx)(n.code,{children:"gte"})," are additionally available.\nFinally, for ",(0,r.jsx)(n.code,{children:"String"}),", ",(0,r.jsx)(n.code,{children:"startsWith"}),", ",(0,r.jsx)(n.code,{children:"endsWith"}),", ",(0,r.jsx)(n.code,{children:"contains"})," and ",(0,r.jsx)(n.code,{children:"matches"})," are also available."]}),"\n",(0,r.jsxs)(n.p,{children:["For ",(0,r.jsx)(n.code,{children:"NodeProperty<*>"})," backed properties, the meta filter for the specific type is used.\nFor ",(0,r.jsx)(n.code,{children:"NodeSetProperty<*>"})," backed properties, the filter fields include  ",(0,r.jsx)(n.code,{children:"all"}),", ",(0,r.jsx)(n.code,{children:"some"})," and ",(0,r.jsx)(n.code,{children:"none"}),", each can be set to a type specific meta filter."]}),"\n",(0,r.jsxs)(n.p,{children:["It is possible to support additional property types, by providing Spring beans of type ",(0,r.jsx)(n.code,{children:"TypeFilterDefinitionEntry"}),".\nHere an example for the Kotlin ",(0,r.jsx)(n.code,{children:"Float"})," type:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"@Bean\nfun floatFilter() =\n    TypeFilterDefinitionEntry(Float::class.createType()) { name, property, parentNodeDefinition, _ ->\n        FloatFilterDefinition(\n            name, parentNodeDefinition.getNeo4jNameOfProperty(property), property.returnType.isMarkedNullable\n        )\n    }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Note that ",(0,r.jsx)(n.code,{children:"TypeFilterDefinitionEntry"})," are free to not create a filter definition by returning ",(0,r.jsx)(n.code,{children:"null"})," in the callback.\nThis is e.g. be used for filters for ",(0,r.jsx)(n.code,{children:"Node(Set)Property<*>"})," if the property has a generic type."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Filter on ",(0,r.jsx)(n.code,{children:"NodeProperty<*>"})," and ",(0,r.jsx)(n.code,{children:"NodeSetProperty<*>"})," take the authorization system into account.\nConceptually, first the related nodes are filtered by the ",(0,r.jsx)(n.code,{children:"Permission"})," to only include nodes the Permission grants access to, then,\nthe filter is evaluated.\nThis prevents an information leak by filtering, however, at the cost of higher complexity.\nTherefore, use ",(0,r.jsx)(n.code,{children:"@FilterProperty"})," on properties which may include non-visible nodes with caution."]})}),"\n",(0,r.jsx)(n.h4,{id:"additional-filters",children:"Additional filters"}),"\n",(0,r.jsxs)(n.p,{children:["With the ",(0,r.jsx)(n.code,{children:'AdditionalFilter("beanName")'})," annotation, property independent filters can be defined.\nThis can for instance be used to filter by Node type, or a complex condition.\nA Spring bean with the specified name and type ",(0,r.jsx)(n.code,{children:"FilterEntryDefinition"})," has to be provided."]}),"\n",(0,r.jsx)(n.h4,{id:"node-filter-generators",children:"Node filter generators"}),"\n",(0,r.jsxs)(n.p,{children:["Bean of type ",(0,r.jsx)(n.code,{children:"NodeFilterGenerator"})," can be used to generate additional filter entries for any Node filters.\nIn contrast to ",(0,r.jsx)(n.a,{href:"#additional-filters",children:"Additional filters"}),", node filter generators allow for dynamically generating the entries\nbased on the provided ",(0,r.jsx)(n.code,{children:"NodeDefinition"}),", which allows e.g. implementing custom meta-filters (like xor)."]})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);